<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>读书 on Ionosphere</title>
    <link>https://blog.ionosphere.site/categories/%E8%AF%BB%E4%B9%A6/</link>
    <description>Recent content in 读书 on Ionosphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Mar 2021 22:55:00 +0800</lastBuildDate><atom:link href="https://blog.ionosphere.site/categories/%E8%AF%BB%E4%B9%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pro Git</title>
      <link>https://blog.ionosphere.site/p/a0fa4610/</link>
      <pubDate>Wed, 10 Mar 2021 22:55:00 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a0fa4610/</guid>
      <description>1. 起步  本章为Git入门。主要讲解为什么Git这么流行，为什么要使用Git，Git如何设置
 1.1. 关于版本控制 记录一个或多个文件内容变化，以便将来阅读特定版本修订情况的系统即版本控制系统（VCS）。
1.1.1. 本地版本控制系统 本地版本控制系统大多都是采用某种简单的数据库来记录文件的历次更新差异，如图所示：
 
其中最流行的一种叫做RCS。RCS的工作原理是在硬盘上保存补丁集（补丁集是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。本地版本控制系统无法让不同系统上的开发者协同工作。
1.1.2. 集中化的版本控制系统 集中化版本控制系统（Centralized Version Control System，CVCS）很好的解决了本地版本控制系统不能让不同系统上的开发者协同工作的问题。CVCS模式：有一个单一的集中管理服务器，保存所有文件的修订版本，协同工作的人都通过客户端连接到这台服务器，取出最新文件或者提交更新。
 
CVCS的优点：1.项目参与者可以看到其他人在做什么。2.管理人员可以掌控每个参与者的权限。3.管理一个CVCS相较于在各个客户端维护本地数据库要简单。
CVCS的缺点：中央服务器故障后会影响所有人的工作。
典型的CVCS：CVS，Subversion，Perforce&amp;hellip;
1.1.3. 分布式版本控制系统 分布式版本控制系统（Distributed Version Control System，DVCS）中，客户端不仅仅提取最新版本的文件，还把代码仓库完整的镜像下来，包括完整的历史记录。在分布式版本控制系统中，任何一处服务器发生故障，事后都可以用任意一个镜像出来的本地仓库恢复。
 
典型的DVCS：Git，Mercurial，Bazaar，Darcs&amp;hellip;
1.2. Git的诞生 Linux开源社区的BitKeeper（一款DVCS）使用权到期了，他们只好去开发自己的版本控制系统😂，并且给新系统制定了若干目标：
 速度 简单的设计 对非线性开发模式的强力支持 完全分布式 有能力高效管理类似Linux内核一样的超大规模项目（速度和数据量）  1.3. Git的工作原理 直接记录快照、而非比较差异 </description>
    </item>
    
    <item>
      <title>Java核心技术·卷I</title>
      <link>https://blog.ionosphere.site/p/a8e95393/</link>
      <pubDate>Thu, 04 Mar 2021 23:27:31 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a8e95393/</guid>
      <description>开始系统的学习Java基础知识
 第1章 Java程序设计概述 Java发展简史    版本 年份 语言新特性 类与接口的数量     1.0 1996 语言本身 211   1.1 1997 内部类 477   1.2 1998 strictfp修饰符 1524   1.3 2000 无 1840   1.4 2002 断言 2723   5.0 2004 泛型类、“for each”循环、可变元参数、自动装箱、元数据、枚举、静态导入 3279   6 2006 无 3793   7 2011 基于字符串的switch、钻石操作符、二进制字面量、异常处理改进 4024   8 2014 lambda表达式、包含默认方法的接口、流和日期/时间库 4240    注：当前已发布到版本16</description>
    </item>
    
  </channel>
</rss>
