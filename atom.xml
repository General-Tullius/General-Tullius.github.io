<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ionosphere.site</id>
    <title>Ionosphere</title>
    <updated>2021-02-06T01:23:51.674Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ionosphere.site"/>
    <link rel="self" href="https://blog.ionosphere.site/atom.xml"/>
    <logo>https://blog.ionosphere.site/images/avatar.png</logo>
    <icon>https://blog.ionosphere.site/favicon.ico</icon>
    <rights>All rights reserved 2021, Ionosphere</rights>
    <entry>
        <title type="html"><![CDATA[坐标系转换]]></title>
        <id>https://blog.ionosphere.site/hX_kztFgl/</id>
        <link href="https://blog.ionosphere.site/hX_kztFgl/">
        </link>
        <updated>2021-02-05T05:13:42.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<pre><code class="language-python">#!/usr/bin/python3
# -*- coding: utf-8 -*-
import json
import requests
import math
 
key = 'your key here'  # 这里填写你的百度开放平台的key
x_pi = 3.14159265358979324 * 3000.0 / 180.0
pi = 3.1415926535897932384626  # π
a = 6378245.0  # 长半轴
ee = 0.00669342162296594323  # 扁率
 
 
def geocode(address):
    &quot;&quot;&quot;
    利用百度geocoding服务解析地址获取位置坐标
    :param address:需要解析的地址
    :return:
    &quot;&quot;&quot;
    geocoding = {'s': 'rsv3',
                 'key': key,
                 'city': '全国',
                 'address': address}
    res = requests.get(
        &quot;http://restapi.amap.com/v3/geocode/geo&quot;, params=geocoding)
    if res.status_code == 200:
        json = res.json()
        status = json.get('status')
        count = json.get('count')
        if status == '1' and int(count) &gt;= 1:
            geocodes = json.get('geocodes')[0]
            lng = float(geocodes.get('location').split(',')[0])
            lat = float(geocodes.get('location').split(',')[1])
            return [lng, lat]
        else:
            return None
    else:
        return None
 
 
def gcj02tobd09(lng, lat):
    &quot;&quot;&quot;
    火星坐标系(GCJ-02)转百度坐标系(BD-09)
    谷歌、高德——&gt;百度
    :param lng:火星坐标经度
    :param lat:火星坐标纬度
    :return:
    &quot;&quot;&quot;
    z = math.sqrt(lng * lng + lat * lat) + 0.00002 * math.sin(lat * x_pi)
    theta = math.atan2(lat, lng) + 0.000003 * math.cos(lng * x_pi)
    bd_lng = z * math.cos(theta) + 0.0065
    bd_lat = z * math.sin(theta) + 0.006
    return [bd_lng, bd_lat]
 
 
def bd09togcj02(bd_lon, bd_lat):
    &quot;&quot;&quot;
    百度坐标系(BD-09)转火星坐标系(GCJ-02)
    百度——&gt;谷歌、高德
    :param bd_lat:百度坐标纬度
    :param bd_lon:百度坐标经度
    :return:转换后的坐标列表形式
    &quot;&quot;&quot;
    x = bd_lon - 0.0065
    y = bd_lat - 0.006
    z = math.sqrt(x * x + y * y) - 0.00002 * math.sin(y * x_pi)
    theta = math.atan2(y, x) - 0.000003 * math.cos(x * x_pi)
    gg_lng = z * math.cos(theta)
    gg_lat = z * math.sin(theta)
    return [gg_lng, gg_lat]
 
 
def wgs84togcj02(lng, lat):
    &quot;&quot;&quot;
    WGS84转GCJ02(火星坐标系)
    :param lng:WGS84坐标系的经度
    :param lat:WGS84坐标系的纬度
    :return:
    &quot;&quot;&quot;
    if out_of_china(lng, lat):  # 判断是否在国内
        return lng, lat
    dlat = transformlat(lng - 105.0, lat - 35.0)
    dlng = transformlng(lng - 105.0, lat - 35.0)
    radlat = lat / 180.0 * pi
    magic = math.sin(radlat)
    magic = 1 - ee * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi)
    dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi)
    mglat = lat + dlat
    mglng = lng + dlng
    return [mglng, mglat]
 
 
def gcj02towgs84(lng, lat):
    &quot;&quot;&quot;
    GCJ02(火星坐标系)转GPS84
    :param lng:火星坐标系的经度
    :param lat:火星坐标系纬度
    :return:
    &quot;&quot;&quot;
    if out_of_china(lng, lat):
        return lng, lat
    dlat = transformlat(lng - 105.0, lat - 35.0)
    dlng = transformlng(lng - 105.0, lat - 35.0)
    radlat = lat / 180.0 * pi
    magic = math.sin(radlat)
    magic = 1 - ee * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi)
    dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi)
    mglat = lat + dlat
    mglng = lng + dlng
    return [lng * 2 - mglng, lat * 2 - mglat]
 
 
def transformlat(lng, lat):
    ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \
        0.1 * lng * lat + 0.2 * math.sqrt(math.fabs(lng))
    ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 *
            math.sin(2.0 * lng * pi)) * 2.0 / 3.0
    ret += (20.0 * math.sin(lat * pi) + 40.0 *
            math.sin(lat / 3.0 * pi)) * 2.0 / 3.0
    ret += (160.0 * math.sin(lat / 12.0 * pi) + 320 *
            math.sin(lat * pi / 30.0)) * 2.0 / 3.0
    return ret
 
 
def transformlng(lng, lat):
    ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \
        0.1 * lng * lat + 0.1 * math.sqrt(math.fabs(lng))
    ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 *
            math.sin(2.0 * lng * pi)) * 2.0 / 3.0
    ret += (20.0 * math.sin(lng * pi) + 40.0 *
            math.sin(lng / 3.0 * pi)) * 2.0 / 3.0
    ret += (150.0 * math.sin(lng / 12.0 * pi) + 300.0 *
            math.sin(lng / 30.0 * pi)) * 2.0 / 3.0
    return ret
 
 
def out_of_china(lng, lat):
    &quot;&quot;&quot;
    判断是否在国内，不在国内不做偏移
    :param lng:
    :param lat:
    :return:
    &quot;&quot;&quot;
    if lng &lt; 72.004 or lng &gt; 137.8347:
        return True
    if lat &lt; 0.8293 or lat &gt; 55.8271:
        return True
    return False
 
 
if __name__ == '__main__':
    lng = 128.543
    lat = 37.065
    result1 = gcj02tobd09(lng, lat)
    result2 = bd09togcj02(lng, lat)
    result3 = wgs84togcj02(lng, lat)
    result4 = gcj02towgs84(lng, lat)
    result5 = geocode('北京市朝阳区朝阳公园')
    print(result1, '\n', result2, '\n', result3, '\n', result4, '\n', result5)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github+PicGo+jsdeliver搭建图床]]></title>
        <id>https://blog.ionosphere.site/Rzivynw31/</id>
        <link href="https://blog.ionosphere.site/Rzivynw31/">
        </link>
        <updated>2021-02-04T09:09:16.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="步骤">步骤</h2>
<p>整体逻辑：使用GitHub仓库作为存储空间，利用jsdeliver做CDN，利用PicGo做图片管理工具</p>
<h3 id="github设置">Github设置</h3>
<ul>
<li>创建公开仓库</li>
<li>创建私人访问Token,并将Token记录下来</li>
</ul>
<blockquote>
<p>注意：Token需要有repo、delete_repo权限</p>
</blockquote>
<h3 id="picgo设置">PicGo设置</h3>
<p>配置如下</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210204213809.png" alt="" loading="lazy"></figure>
<h2 id="资源">资源</h2>
<p><a href="https://github.com/Molunerfinn/PicGo" target="_blank">PicGo</a>    <a href="https://www.jsdelivr.com" target="_blank">jsDelivr</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[放假倒计时🏇]]></title>
        <id>https://blog.ionosphere.site/NkU0guHnx/</id>
        <link href="https://blog.ionosphere.site/NkU0guHnx/">
        </link>
        <updated>2021-02-01T11:19:42.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<center style="color:red;font-size:larger;">3（2021-02-05 00:00:00）</center>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑神话之悟空]]></title>
        <id>https://blog.ionosphere.site/hei-shen-hua-zhi-wu-kong/</id>
        <link href="https://blog.ionosphere.site/hei-shen-hua-zhi-wu-kong/">
        </link>
        <updated>2020-08-20T03:26:07.000Z</updated>
        <content type="html"><![CDATA[<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=841786906&bvid=BV1x54y1e7zf&cid=226204073&page=1&high_quality=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[今天天气很是不错...]]></title>
        <id>https://blog.ionosphere.site/202008062135/</id>
        <link href="https://blog.ionosphere.site/202008062135/">
        </link>
        <updated>2020-08-06T13:35:25.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://blog.ionosphere.site/post-images/1612160605326.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[拿到 [真·大师剑] 了]]></title>
        <id>https://blog.ionosphere.site/s6rX3pWUl/</id>
        <link href="https://blog.ionosphere.site/s6rX3pWUl/">
        </link>
        <updated>2018-11-03T19:10:03.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210205191626.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[目击了一条龙]]></title>
        <id>https://blog.ionosphere.site/dqZz7PJJF/</id>
        <link href="https://blog.ionosphere.site/dqZz7PJJF/">
        </link>
        <updated>2018-09-14T14:58:33.000Z</updated>
        <content type="html"><![CDATA[<p><video src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/video/2018091422582400-F1C11A22FAEE3B82F21B330E1B786A39.mp4" controls="controls" width="100%"></video></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[西山国家森林公园灵山风景区]]></title>
        <id>https://blog.ionosphere.site/nun4bYzXp/</id>
        <link href="https://blog.ionosphere.site/nun4bYzXp/">
        </link>
        <updated>2018-03-10T13:04:19.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210204165719.jpg" alt="" loading="lazy"><br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210204165718.jpg" alt="" loading="lazy"><br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210204165720.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>