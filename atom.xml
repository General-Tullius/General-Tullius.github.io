<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.ionosphere.site</id>
    <title>Ionosphere</title>
    <updated>2021-02-21T06:59:57.955Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.ionosphere.site"/>
    <link rel="self" href="https://blog.ionosphere.site/atom.xml"/>
    <logo>https://blog.ionosphere.site/images/avatar.png</logo>
    <icon>https://blog.ionosphere.site/favicon.ico</icon>
    <rights>All rights reserved 2021, Ionosphere</rights>
    <entry>
        <title type="html"><![CDATA[Gridea Gitalk 评论登录403问题]]></title>
        <id>https://blog.ionosphere.site/dIlJJHRgh/</id>
        <link href="https://blog.ionosphere.site/dIlJJHRgh/">
        </link>
        <updated>2021-02-20T09:59:56.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="表象">表象</h1>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210220214315.png" alt="Gitalk 403 错误" loading="lazy"></figure>
<h1 id="成因">成因</h1>
<p>Gitalk默认的GitHub oauth请求反向代理CORS使用的是<code>https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token</code><a href="https://github.com/Rob--W/cors-anywhere">GitHub项目</a>，该代理只是一个演示项目，由于被滥用，作者决定于<a href="https://github.com/Rob--W/cors-anywhere/issues/301">2021年1月31日</a>停止开放使用，从而导致了此问题的产生</p>
<h1 id="解决">解决</h1>
<blockquote>
<p>在Heroku上部署自己的cros-anywhere</p>
</blockquote>
<ul>
<li>
<p>1.注册Heroku账号</p>
</li>
<li>
<p>2.fork cros-anywhere项目</p>
</li>
<li>
<p>3.创建Heroku应用</p>
</li>
<li>
<p>4.将自己fork的项目部署创建的Heroku应用</p>
<p><a href="https://devcenter.heroku.com/articles/getting-started-with-nodejs#deploy-the-app">官方文档</a><br>
实际上自己通过网页端操作更方便点</p>
</li>
<li>
<p>5.设置白名单防止滥用导致封号</p>
</li>
<li>
<p>6.修改主题中Gitalk相关的代码<br>
增加Gitalk反向代理配置项</p>
</li>
</ul>
<pre><code class="language-json">// 修改主题根目录下config.json文件，增加Gitalk反向代理自定义配置节点，用于自定义配置代理地址
{
    &quot;customConfig&quot;: [
        {
            &quot;name&quot;: &quot;gitalkProxy&quot;,
            &quot;label&quot;: &quot;GitHub登陆&quot;,
            &quot;group&quot;: &quot;Gitalk&quot;,
            //此处将地址配置成自己的代理服务器
            &quot;value&quot;: &quot;https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token&quot;,
            &quot;type&quot;: &quot;input&quot;,
            &quot;note&quot;: &quot;GitHub验证&quot;
        }
        ]
}
</code></pre>
<p>修改Gitalk初始化代码<code>templates/includes/gitalk.ejs</code></p>
<pre><code class="language-javascript">&lt;script&gt;
    window.onload = function() {
        var gitalk = new Gitalk({
            //增加代理参数，赋值读取自定义配置
            proxy: '&lt;%= site.customConfig.gitalkProxy %&gt;',
            clientID: '&lt;%= commentSetting.gitalkSetting.clientId %&gt;',
            clientSecret: '&lt;%= commentSetting.gitalkSetting.clientSecret %&gt;',
            repo: '&lt;%= commentSetting.gitalkSetting.repository %&gt;',
            owner: '&lt;%= commentSetting.gitalkSetting.owner %&gt;',
            admin: ['&lt;%= commentSetting.gitalkSetting.owner %&gt;'],
            id: (location.pathname).substring(0, 49), // Ensure uniqueness and length less than 50
            distractionFreeMode: false // Facebook-like distraction free mode
        })

        gitalk.render('gitalk-container')
    }
&lt;/script&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[🎉🎉🎉放假了🎉🎉🎉]]></title>
        <id>https://blog.ionosphere.site/NkU0guHnx/</id>
        <link href="https://blog.ionosphere.site/NkU0guHnx/">
        </link>
        <updated>2021-02-06T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<center>🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉</center>
<center style="color:red;font-size:larger;">🎉🎉🎉今天放假！！！🎉🎉🎉</center>
<center>🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉🎉</center>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Visual Studio Code 使用问题记录]]></title>
        <id>https://blog.ionosphere.site/P-CCz4AvV/</id>
        <link href="https://blog.ionosphere.site/P-CCz4AvV/">
        </link>
        <updated>2021-02-06T05:19:30.000Z</updated>
        <content type="html"><![CDATA[<h2 id="nuget包管理加载版本时报错">Nuget包管理加载版本时报错</h2>
<p>解决方案：</p>
<ul>
<li>打开<code>.vscode/extensions/jmrog.vscode-nuget-package-manager-1.1.6/out/src/actions/add-methods/fetchPackageVersions.js</code>，</li>
<li>修改代码<pre><code class="language-javascript">...node_fetch_1.default(`${versionsUrl}${selectedPackageName.toLowerCase()}/index.json`, utils_1.getFetchOptions(vscode.workspace.getConfiguration('http')))
</code></pre>
</li>
</ul>
<hr/>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[坐标系转换]]></title>
        <id>https://blog.ionosphere.site/hX_kztFgl/</id>
        <link href="https://blog.ionosphere.site/hX_kztFgl/">
        </link>
        <updated>2021-02-05T05:13:42.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<pre><code class="language-python">#!/usr/bin/python3
# -*- coding: utf-8 -*-
import json
import requests
import math
 
key = 'your key here'  # 这里填写你的百度开放平台的key
x_pi = 3.14159265358979324 * 3000.0 / 180.0
pi = 3.1415926535897932384626  # π
a = 6378245.0  # 长半轴
ee = 0.00669342162296594323  # 扁率
 
 
def geocode(address):
    &quot;&quot;&quot;
    利用百度geocoding服务解析地址获取位置坐标
    :param address:需要解析的地址
    :return:
    &quot;&quot;&quot;
    geocoding = {'s': 'rsv3',
                 'key': key,
                 'city': '全国',
                 'address': address}
    res = requests.get(
        &quot;http://restapi.amap.com/v3/geocode/geo&quot;, params=geocoding)
    if res.status_code == 200:
        json = res.json()
        status = json.get('status')
        count = json.get('count')
        if status == '1' and int(count) &gt;= 1:
            geocodes = json.get('geocodes')[0]
            lng = float(geocodes.get('location').split(',')[0])
            lat = float(geocodes.get('location').split(',')[1])
            return [lng, lat]
        else:
            return None
    else:
        return None
 
 
def gcj02tobd09(lng, lat):
    &quot;&quot;&quot;
    火星坐标系(GCJ-02)转百度坐标系(BD-09)
    谷歌、高德——&gt;百度
    :param lng:火星坐标经度
    :param lat:火星坐标纬度
    :return:
    &quot;&quot;&quot;
    z = math.sqrt(lng * lng + lat * lat) + 0.00002 * math.sin(lat * x_pi)
    theta = math.atan2(lat, lng) + 0.000003 * math.cos(lng * x_pi)
    bd_lng = z * math.cos(theta) + 0.0065
    bd_lat = z * math.sin(theta) + 0.006
    return [bd_lng, bd_lat]
 
 
def bd09togcj02(bd_lon, bd_lat):
    &quot;&quot;&quot;
    百度坐标系(BD-09)转火星坐标系(GCJ-02)
    百度——&gt;谷歌、高德
    :param bd_lat:百度坐标纬度
    :param bd_lon:百度坐标经度
    :return:转换后的坐标列表形式
    &quot;&quot;&quot;
    x = bd_lon - 0.0065
    y = bd_lat - 0.006
    z = math.sqrt(x * x + y * y) - 0.00002 * math.sin(y * x_pi)
    theta = math.atan2(y, x) - 0.000003 * math.cos(x * x_pi)
    gg_lng = z * math.cos(theta)
    gg_lat = z * math.sin(theta)
    return [gg_lng, gg_lat]
 
 
def wgs84togcj02(lng, lat):
    &quot;&quot;&quot;
    WGS84转GCJ02(火星坐标系)
    :param lng:WGS84坐标系的经度
    :param lat:WGS84坐标系的纬度
    :return:
    &quot;&quot;&quot;
    if out_of_china(lng, lat):  # 判断是否在国内
        return lng, lat
    dlat = transformlat(lng - 105.0, lat - 35.0)
    dlng = transformlng(lng - 105.0, lat - 35.0)
    radlat = lat / 180.0 * pi
    magic = math.sin(radlat)
    magic = 1 - ee * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi)
    dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi)
    mglat = lat + dlat
    mglng = lng + dlng
    return [mglng, mglat]
 
 
def gcj02towgs84(lng, lat):
    &quot;&quot;&quot;
    GCJ02(火星坐标系)转GPS84
    :param lng:火星坐标系的经度
    :param lat:火星坐标系纬度
    :return:
    &quot;&quot;&quot;
    if out_of_china(lng, lat):
        return lng, lat
    dlat = transformlat(lng - 105.0, lat - 35.0)
    dlng = transformlng(lng - 105.0, lat - 35.0)
    radlat = lat / 180.0 * pi
    magic = math.sin(radlat)
    magic = 1 - ee * magic * magic
    sqrtmagic = math.sqrt(magic)
    dlat = (dlat * 180.0) / ((a * (1 - ee)) / (magic * sqrtmagic) * pi)
    dlng = (dlng * 180.0) / (a / sqrtmagic * math.cos(radlat) * pi)
    mglat = lat + dlat
    mglng = lng + dlng
    return [lng * 2 - mglng, lat * 2 - mglat]
 
 
def transformlat(lng, lat):
    ret = -100.0 + 2.0 * lng + 3.0 * lat + 0.2 * lat * lat + \
        0.1 * lng * lat + 0.2 * math.sqrt(math.fabs(lng))
    ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 *
            math.sin(2.0 * lng * pi)) * 2.0 / 3.0
    ret += (20.0 * math.sin(lat * pi) + 40.0 *
            math.sin(lat / 3.0 * pi)) * 2.0 / 3.0
    ret += (160.0 * math.sin(lat / 12.0 * pi) + 320 *
            math.sin(lat * pi / 30.0)) * 2.0 / 3.0
    return ret
 
 
def transformlng(lng, lat):
    ret = 300.0 + lng + 2.0 * lat + 0.1 * lng * lng + \
        0.1 * lng * lat + 0.1 * math.sqrt(math.fabs(lng))
    ret += (20.0 * math.sin(6.0 * lng * pi) + 20.0 *
            math.sin(2.0 * lng * pi)) * 2.0 / 3.0
    ret += (20.0 * math.sin(lng * pi) + 40.0 *
            math.sin(lng / 3.0 * pi)) * 2.0 / 3.0
    ret += (150.0 * math.sin(lng / 12.0 * pi) + 300.0 *
            math.sin(lng / 30.0 * pi)) * 2.0 / 3.0
    return ret
 
 
def out_of_china(lng, lat):
    &quot;&quot;&quot;
    判断是否在国内，不在国内不做偏移
    :param lng:
    :param lat:
    :return:
    &quot;&quot;&quot;
    if lng &lt; 72.004 or lng &gt; 137.8347:
        return True
    if lat &lt; 0.8293 or lat &gt; 55.8271:
        return True
    return False
 
 
if __name__ == '__main__':
    lng = 128.543
    lat = 37.065
    result1 = gcj02tobd09(lng, lat)
    result2 = bd09togcj02(lng, lat)
    result3 = wgs84togcj02(lng, lat)
    result4 = gcj02towgs84(lng, lat)
    result5 = geocode('北京市朝阳区朝阳公园')
    print(result1, '\n', result2, '\n', result3, '\n', result4, '\n', result5)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github+PicGo+jsdeliver搭建图床]]></title>
        <id>https://blog.ionosphere.site/Rzivynw31/</id>
        <link href="https://blog.ionosphere.site/Rzivynw31/">
        </link>
        <updated>2021-02-04T09:09:16.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="步骤">步骤</h2>
<p>整体逻辑：使用GitHub仓库作为存储空间，利用jsdeliver做CDN，利用PicGo做图片管理工具</p>
<h3 id="github设置">Github设置</h3>
<ul>
<li>创建公开仓库</li>
<li>创建私人访问Token,并将Token记录下来</li>
</ul>
<blockquote>
<p>注意：Token需要有repo、delete_repo权限</p>
</blockquote>
<h3 id="picgo设置">PicGo设置</h3>
<p>配置如下</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210204213809.png" alt="" loading="lazy"></figure>
<h2 id="资源">资源</h2>
<p><a href="https://github.com/Molunerfinn/PicGo" target="_blank">PicGo</a>    <a href="https://www.jsdelivr.com" target="_blank">jsDelivr</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Oracle 定时备份]]></title>
        <id>https://blog.ionosphere.site/u0rATw3dE/</id>
        <link href="https://blog.ionosphere.site/u0rATw3dE/">
        </link>
        <updated>2020-12-25T06:38:32.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>转载自：<a href="https://segmentfault.com/a/1190000008596697" target="_blank">Windows下Oracle定时备份(全量备份)</a></p>
</blockquote>
<p>关于Windows下oracle全量备份的文章，很多网站都有，写下本文不过是为了以后方便查找，不用再到处找。</p>
<p>以下些许内容有所参考到其他人所写内容，这里无意冒犯，本文引用内容部分会附上参考地址，还望原作者见谅。</p>
<h2 id="备份脚本">备份脚本</h2>
<p>新建txt文档，把脚本复制进去后改文件格式为bat文件，双击运行即可测试该脚本是否有误。</p>
<p>这里要说明一下，开始把脚本拿过来执行时，一直未能成功备份数据库</p>
<p>用bat的pause暂停调试发现了一些问题，有时不注意可能会在定义的变量如BACKUPDATE、USER等后面带了空格</p>
<p>这个时候问题就来了，导致参数的不正确，所以这里需注意！</p>
<pre><code class="language-shell">@echo off   
echo ================================================   
echo  Windows环境下Oracle数据库的自动备份脚本  
echo  1. 使用当前日期命名备份文件。  
echo  2. 自动删除7天前的备份。  
echo ================================================  
echo  以“YYYYMMDD”格式取出当前时间。  
set BACKUPDATE=%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%
echo  设置用户名、密码和要备份的数据库
set USER=ora_user
set PASSWORD=ora_name
set DATABASE=conn_db
echo  创建备份目录
if not exist &quot;E:\backup\data&quot;       mkdir E:\backup\data  
if not exist &quot;E:\backup\log&quot;        mkdir E:\backup\log  
set DATADIR=E:\backup\data
set LOGDIR=E:\backup\log
exp %USER%/%PASSWORD%@%DATABASE% file=%DATADIR%\data_%BACKUPDATE%.dmp log=%LOGDIR%\log_%BACKUPDATE%.log
echo  删除7天前的备份。
forfiles /p &quot;%DATADIR%&quot; /s /m *.* /d -7 /c &quot;cmd /c del @path&quot;
forfiles /p &quot;%LOGDIR%&quot; /s /m *.* /d -7 /c &quot;cmd /c del @path&quot;
exit
</code></pre>
<blockquote>
<p>注：该脚本参考<a href="http://blog.csdn.net/iw1210/article/details/39312783" target="_blank">Windows环境下Oracle数据库的自动备份脚本</a></p>
</blockquote>
<h2 id="定时任务">定时任务</h2>
<p>这里需要用到Windows的【任务计划程序】，操作按照下列截图一一操作。</p>
<p>一、快捷查询：<br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206144645.png" alt="" loading="lazy"></p>
<p>二、选择任务计划程序：<br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206144756.png" alt="" loading="lazy"></p>
<p>三、创建基本任务：</p>
<figure data-type="image" tabindex="1"><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206144841.png" alt="" loading="lazy"></figure>
<p>四、填写任务相关信息：<br>
1）定时任务描述<br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206144907.png" alt="" loading="lazy"></p>
<p>2）任务执行时间<br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206144933.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="2"><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206144953.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206145017.png" alt="" loading="lazy"></figure>
<p>选择刚刚写的数据库备份脚本<br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206145042.png" alt="" loading="lazy"></p>
<p>最后在任务列表里可以看到刚刚创建的定时任务，那么这个任务从设定的时间开始则会每天执行一次，即达到定时备份任务了<br>
<img src="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/img/20210206145102.png" alt="" loading="lazy"></p>
<blockquote>
<p>注：以上内容参考 <a href="http://jingyan.baidu.com/article/08b6a591c30ae914a8092205.html" target="_blank">定时备份ORACLE数据库(windows环境下)</a></p>
</blockquote>
<h2 id="脚本">脚本</h2>
<p><a href="https://cdn.jsdelivr.net/gh/General-Tullius/NetDisk/annex/定时备份.txt" target="_blank">定时备份.txt</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文字转语音]]></title>
        <id>https://blog.ionosphere.site/mV0zp9v9E/</id>
        <link href="https://blog.ionosphere.site/mV0zp9v9E/">
        </link>
        <updated>2020-10-06T05:48:54.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-shell"># 文字转语音
say -f 1.txt -o 1.aiff
say 你好 -o 你好.aiff
# 音频格式转换
ffmpeg -f aiff -i 你好.aiff 你好.mp3
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[黑神话之悟空]]></title>
        <id>https://blog.ionosphere.site/hei-shen-hua-zhi-wu-kong/</id>
        <link href="https://blog.ionosphere.site/hei-shen-hua-zhi-wu-kong/">
        </link>
        <updated>2020-08-20T03:26:07.000Z</updated>
        <content type="html"><![CDATA[<div style="position: relative; padding: 30% 45%;">
<iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=841786906&bvid=BV1x54y1e7zf&cid=226204073&page=1&high_quality=1&danmaku=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[今天天气很是不错...]]></title>
        <id>https://blog.ionosphere.site/202008062135/</id>
        <link href="https://blog.ionosphere.site/202008062135/">
        </link>
        <updated>2020-08-06T13:35:25.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://blog.ionosphere.site/post-images/1612160605326.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Homebrew]]></title>
        <id>https://blog.ionosphere.site/E8SYLA47Y/</id>
        <link href="https://blog.ionosphere.site/E8SYLA47Y/">
        </link>
        <updated>2020-07-06T05:46:40.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p><a href="https://brew.sh/index_zh-cn" target="_blank">Homebrew</a></p>
</blockquote>
<h2 id="查看已安装的包">查看已安装的包</h2>
<p>查看已经安装的包</p>
<pre><code class="language-bash">brew list
</code></pre>
<h2 id="更新homebrew">更新Homebrew</h2>
<p>更新Homebrew(此命令会显示可以更新的包列表，已安装的包会有对号)</p>
<pre><code class="language-bash">brew update
</code></pre>
<h2 id="列出可更新的包">列出可更新的包</h2>
<pre><code class="language-bash"># 不包含含自动更新的包
brew outdated
# 含自动更新的包
brew cask outdated --greedy
</code></pre>
<h2 id="安装更新">安装更新</h2>
<pre><code class="language-bash">brew upgrade
</code></pre>
<h2 id="清理旧版本">清理旧版本</h2>
<pre><code class="language-bash"># 查看可清理的包列表
brew cleanup -n

# 清理旧版本包
brew cleanup
</code></pre>
]]></content>
    </entry>
</feed>