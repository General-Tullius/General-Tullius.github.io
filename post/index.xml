<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ionosphere</title>
    <link>https://blog.ionosphere.site/post/</link>
    <description>Recent content in Posts on Ionosphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 28 May 2021 13:31:34 +0800</lastBuildDate><atom:link href="https://blog.ionosphere.site/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>自动操作（Automator）</title>
      <link>https://blog.ionosphere.site/p/375e7a13/</link>
      <pubDate>Fri, 28 May 2021 13:31:34 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/375e7a13/</guid>
      <description> 自动操作是系统自带软件，可以将一些重复性的工作自动化。
 功能使用 Shell脚本接收参数   自变量获取参数
 自变量获取参数 
  stdin获取参数  stdin获取参数 
  故障排除 Shell脚本部分命令不识别  **: command not found 
 查看选择的Shell类型是否合适。 在脚本前面加入source ~/.bash_profile,引入环境变量配置。  </description>
    </item>
    
    <item>
      <title>装配Bean</title>
      <link>https://blog.ionosphere.site/p/a6324888/</link>
      <pubDate>Thu, 27 May 2021 15:15:20 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a6324888/</guid>
      <description>创建应用对象之间协作关系的行为通常称为装配（wiring），这也是依赖注入（DI）的本质
 Spring配置方案  在XML中进显式配置 在Java中进行显式配置 隐式的bean发现机制和自动装配  选择Spring装配方案时，要根据实际情况选择自己最喜欢的方式，多种方案还可以搭配使用。要尽可能的使用自动配置机制，显式配置越少越好；当必须要使用显式配置时，优先JavaConfig；只有在想使用便利的XML命名空间而且在JavaConfig中没有同样的实现时，才使用XML。
自动化装配bean Spring从两个角度来实现自动化装配：
 组件扫描（Component scanning）：Spring会自动发现应用上下文中所创建的bean。 自动装配（autowiring）：Spring自动满足bean之间的依赖。  创建可被发现的bean 创建组件类 在类上加@Component注解，就表明这个类会作为组件类、并告知了Spring要为这个类创建bean。
package soundsystem; import org.springframework.stereotype.Component; @Component public class SgtPeppers implements CompactDisc { private String title = &amp;#34;Sgt. Pepper&amp;#39;s Lonely Hearts Club Band&amp;#34;; private String artist = &amp;#34;The Beatles&amp;#34;; public void play() { System.out.println(&amp;#34;Playing &amp;#34; + title + &amp;#34; by &amp;#34; + artist); } } 开启组件扫描 组件扫描默认不启用，需要显式配置来命令Spring扫描带有@Component注解的类、并为之创建bean。
  通过Java配置类启用组件扫描
package soundsystem; import org.</description>
    </item>
    
    <item>
      <title>初步了解Spring</title>
      <link>https://blog.ionosphere.site/p/006e1380/</link>
      <pubDate>Thu, 20 May 2021 15:16:06 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/006e1380/</guid>
      <description>Spring是什么 Spring是一个为了解决企业级应用开发的复杂性而创建的开源框架。
Spring降低Java开发复杂性的4种关键策略
 基于POJO的轻量级和最小侵入性编程； 通过依赖注入和面向接口实现松耦合； 基于切面和惯例进行声明式编程； 通过切面和模板减少样板式代码。  基于POJO Spring代码仍旧是POJO，除了某些类会用到Spring注解，不会感觉到使用Spring的任何痕迹。
依赖注入（DI） 依赖注入可以使应用对象之间保持松散耦合。
应用切面 面向切面编程可以把遍布应用各处的功能分离出来，形成可重用组件。面向切面编程往往被定义为促使软件系统实现关注点分离的一项技术。
使用模板 通过模板封装来消除样板式代码（比如JDBC操作）。
Spring容器 在Spring中，应用对象生存于Spring容器（container）中。容器负责创建对象，装配它们，配置并管理它们的整个生命周期，从生存到死亡（new到finalize()）。容器是使用DI管理构成应用的组件，它会创建相互协作的组件之间的关联。
Spring自带了两类容器，bean工厂 和 应用上下文。bean工厂是最简单的容器，提供了基本的DI支持。应用上下文基于bean工厂构建，并提供应用框架级别的服务。bean工厂太过低级，，应用上下文要比bean工厂更受欢迎。
应用上下文 常见的应用上下文
   类型 作用     AnnotationConfigApplicationContext 从一个或多个基于Java的配置类中加载Spring应用上下文   AnnotationConfigWebApplicationContext 从一个或多个基于Java的配置类中加载Spring Web应用上下文。   ClassPathXmlApplicationContext 从类路径下的一个或多个XML配置文件中加载上下文定义，把应用上下文的定义文件作为类资源。   FileSystemXmlApplicationContext 从文件系统下的一个或多个XML配置文件中加载上下文定义。   XmlWebApplicationContext 从Web应用下的一个或多个XML配置文件中加载上下文定义。    bean的生命周期  bean的生命周期 
Spring功能概览 Spring框架通过专注于DI和AOP和消除样板代码来简化企业级Java开发，这只是Spring提供的部分功能。Spring框架是一个庞大的生态圈，它涵盖了多个不同领域，例如Web服务、REST、移动开发以及NoSQL等。
 Spring框架模块示意图</description>
    </item>
    
    <item>
      <title>自制App图标</title>
      <link>https://blog.ionosphere.site/p/1844ba76/</link>
      <pubDate>Wed, 28 Apr 2021 12:19:35 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/1844ba76/</guid>
      <description>步骤  设计图标  尺寸要求1024*1024的
创建图片存放目录  mkdir AppIcon.iconset
名字随便，但是必须有.iconset后缀
将原图标转为各种尺寸  sips -z 16 16 AppIcon.png --out AppIcon.iconset/icon_16x16.png sips -z 32 32 AppIcon.png --out AppIcon.iconset/icon_16x16@2x.png sips -z 32 32 AppIcon.png --out AppIcon.iconset/icon_32x32.png sips -z 64 64 AppIcon.png --out AppIcon.iconset/icon_32x32@2x.png sips -z 128 128 AppIcon.png --out AppIcon.iconset/icon_128x128.png sips -z 256 256 AppIcon.png --out AppIcon.iconset/icon_128x128@2x.png sips -z 256 256 AppIcon.png --out AppIcon.iconset/icon_256x256.png sips -z 512 512 AppIcon.png --out AppIcon.iconset/icon_256x256@2x.png sips -z 512 512 AppIcon.</description>
    </item>
    
    <item>
      <title>正则表达式常用规则</title>
      <link>https://blog.ionosphere.site/p/6de70ddc/</link>
      <pubDate>Sat, 24 Apr 2021 21:27:56 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/6de70ddc/</guid>
      <description>首先要明确一点，针对同一个场景的正则表达式并不是唯一的，只要结果正确即可，不要疑惑为什么自己写的正则跟别人的不一样
 匹配确定的值 值是什么表达式就是什么。
# 匹配字母‘A’ A 匹配一些值 用方括号将值包裹起来
# 匹配姓张的和姓王的 [张王]\w+ # 匹配数字 [0-9] # 匹配中文 [\u4e00-\u9fa5] # 区间取非 # ^只有在‘[]’中且紧跟在‘[’之后才表示取非 # 例：非数字 [^0-9]  元字符：有特殊含义的字符，比如在‘[]’中的连字符‘-’，表示取连字符左右两边值之间的内容。若要取元字符本身的含义，需要用转移字符‘\’进行转义。若用转义字符对普通字符转义，则普通字符将被理解成元字符，比如匹配换行符‘\n’。
 匹配所有值 英文句号.
匹配次数控制 匹配确定的次数 匹配一次 表达式默认匹配一次，不需要做任何特殊操作
匹配n次 表达式加‘{n}’
匹配m次到n次 表达式加‘{m,n}’
匹配不确定的次数 匹配1到多次 表达式加‘+’
# 匹配一组数字 \d+ 匹配0到多次 # 匹配0到多个字符 \w* 匹配0次或1次 表达式加‘?’
# 匹配网址 https?//[\w./]+ 边界 单词边界 \b
字符串边界 ^\w+$</description>
    </item>
    
    <item>
      <title>Web服务器建设时的一些点</title>
      <link>https://blog.ionosphere.site/p/e4584901/</link>
      <pubDate>Fri, 16 Apr 2021 09:57:10 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/e4584901/</guid>
      <description> 整理一下Web服务器建设时需要注意的内容
 硬件  数量：2台（程序+数据）
硬盘：500G+/500G+
内存：16G+/16G+
 软件 操作系统 推荐版本：Windows Server 2016
IIS  服务器需要有 .NET Framework 4.0 环境
 开启IIS功能
 
 不要图方便去开启IIS的&amp;quot;目录浏览&amp;quot;，要通过&amp;quot;默认文档&amp;quot;功能来配置访问IP端口地址之后的默认跳转页面
  
数据库 推荐版本：SqlServer 2016，最低2008R2
数据库挂上去之后要做好自动维护任务。自动维护包含备份和清理两部分，不要只做定时备份，但是不定时清理旧备份，最终磁盘空间用完了，导致一开始正常运行的系统，某一天突然出问题
其它软件 经常有客户服务器在初期建设时因为软件选用不当，导致被装了各种全家桶软件，平时各种广告弹窗，影响远程时的速度，有些还严重到影响服务器性能，这里对常用软件做一些建议：
解压缩：7z 下载地址
文本编辑器：Visual Studio Code 下载地址
浏览器：Edge 下载地址Google Chrome下载地址
网络 公网  IP需要固定或者可以域名访问 开放必要的端口，做好端口映射。正常情况下，需要开放BS、消息服务、地图服务（固定6080）3个端口，前后端分离版本需要额外增加前端端口。  内网  IP需要固定 需要了解客户网络特性，比如在服务器\内网环境是否可以访问自己的外网IP 配置服务器防火墙，需要哪个端口才开哪个，不要直接关闭防火墙  </description>
    </item>
    
    <item>
      <title>关于Web Service</title>
      <link>https://blog.ionosphere.site/p/74cc3c3c/</link>
      <pubDate>Fri, 09 Apr 2021 12:03:53 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/74cc3c3c/</guid>
      <description>客户端终结点配置 &amp;lt;system.serviceModel&amp;gt; &amp;lt;bindings&amp;gt; &amp;lt;basicHttpBinding&amp;gt; &amp;lt;binding name=&amp;#34;MISServiceHttpBinding&amp;#34; maxBufferSize=&amp;#34;2147483647&amp;#34; maxReceivedMessageSize=&amp;#34;2147483647&amp;#34;/&amp;gt; &amp;lt;/basicHttpBinding&amp;gt; &amp;lt;/bindings&amp;gt; &amp;lt;client&amp;gt; ... &amp;lt;/client&amp;gt; &amp;lt;/system.serviceModel&amp;gt; </description>
    </item>
    
    <item>
      <title>Pro Git</title>
      <link>https://blog.ionosphere.site/p/a0fa4610/</link>
      <pubDate>Wed, 10 Mar 2021 22:55:00 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a0fa4610/</guid>
      <description>起步 本章为Git入门。主要讲解为什么Git这么流行，为什么要使用Git，Git如何设置
 关于版本控制 记录一个或多个文件内容变化，以便将来阅读特定版本修订情况的系统即版本控制系统（VCS）。
本地版本控制系统 本地版本控制系统大多都是采用某种简单的数据库来记录文件的历次更新差异，如图所示：
 
其中最流行的一种叫做RCS。RCS的工作原理是在硬盘上保存补丁集（补丁集是指文件修订前后的变化）；通过应用所有的补丁，可以重新计算出各个版本的文件内容。本地版本控制系统无法让不同系统上的开发者协同工作。
集中化的版本控制系统 集中化版本控制系统（Centralized Version Control System，CVCS）很好的解决了本地版本控制系统不能让不同系统上的开发者协同工作的问题。CVCS模式：有一个单一的集中管理服务器，保存所有文件的修订版本，协同工作的人都通过客户端连接到这台服务器，取出最新文件或者提交更新。
 
CVCS的优点：1.项目参与者可以看到其他人在做什么。2.管理人员可以掌控每个参与者的权限。3.管理一个CVCS相较于在各个客户端维护本地数据库要简单。
CVCS的缺点：中央服务器故障后会影响所有人的工作。
典型的CVCS：CVS，Subversion，Perforce&amp;hellip;
分布式版本控制系统 分布式版本控制系统（Distributed Version Control System，DVCS）中，客户端不仅仅提取最新版本的文件，还把代码仓库完整的镜像下来，包括完整的历史记录。在分布式版本控制系统中，任何一处服务器发生故障，事后都可以用任意一个镜像出来的本地仓库恢复。
 
典型的DVCS：Git，Mercurial，Bazaar，Darcs&amp;hellip;
 Git的诞生 Linux开源社区的BitKeeper（一款DVCS）使用权到期了，他们只好去开发自己的版本控制系统😂，并且给新系统制定了若干目标：
 速度 简单的设计 对非线性开发模式的强力支持 完全分布式 有能力高效管理类似Linux内核一样的超大规模项目（速度和数据量）   Git的工作原理 直接记录快照、而非比较差异 Git和其它版本控制系统的主要差别在于对待数据的方式。其它大部分系统一文件变更列表的方式存储信息，将它们存储的信息看作是一组基本文件和每个文件随时间逐步累积的差异。
 
Git则更像是把数据看作是对小型文件系统的一系列快照。每当你提交更新或者保存项目状态时，它基本上就会对当时的全部文件创建一个快照并保存这个快照的索引。为了效率，如果文件没有修改，Git不再重新存储该文件，而是保留一个链接指向之前存储的文件。Git对待数据更像是一个快照流。
 
近乎所有操作都是本地执行 Giit中大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息，因为本地磁盘上就有项目的完整历史，同时Git是先提交到本地副本，再上传到服务器的，所以即使离线也可以继续进行任何操作。
Git保证完整性 Git中所有数据在存储前都计算校验和，然后以校验和来引用。这意味着不可能在Git不知情时更改任何文件内容或目录内容。
Git用于计算校验和的机制叫做SHA-1散列（Hash，哈希，把任意长度的输入「又叫做预映射pre-image」通过散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来确定唯一的输入值）。这是一个由40个16进制字符（0-9，a-f）组成的字符串，基于Git中文件的内容或目录结构计算出来。SHA-1 Hash 看起来是这样的：24b9da6552252987aa493b52f8696cd6d3b00373
Git中保存的信息都是以文件的Hash值来索引，而不是文件名。
Git一般只添加数据 你执行的Git操作几乎只向数据库中添加数据，也就是说Git几乎不会执行任何不可恢复操作。
三种状态  已修改（modified） 已暂存（staged） 已提交（committed）  已修改表示修改了文件，但是还没有保存到数据库。已暂存表示对一个已修改文件的当前版本做了标记使之包含在下次提交的快照中。已提交表示数据已安全的保存在了本地数据库中。
 安装Git 略
 Git初始配置 Git自带一个 git config 工具来帮助设置控制 Git 外观和行为的配置变量。这些变量主要存储在三个地方：</description>
    </item>
    
    <item>
      <title>Java核心技术·卷I</title>
      <link>https://blog.ionosphere.site/p/a8e95393/</link>
      <pubDate>Thu, 04 Mar 2021 23:27:31 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a8e95393/</guid>
      <description>开始系统的学习Java基础知识
 第1章 Java程序设计概述 Java发展简史    版本 年份 语言新特性 类与接口的数量     1.0 1996 语言本身 211   1.1 1997 内部类 477   1.2 1998 strictfp修饰符 1524   1.3 2000 无 1840   1.4 2002 断言 2723   5.0 2004 泛型类、“for each”循环、可变元参数、自动装箱、元数据、枚举、静态导入 3279   6 2006 无 3793   7 2011 基于字符串的switch、钻石操作符、二进制字面量、异常处理改进 4024   8 2014 lambda表达式、包含默认方法的接口、流和日期/时间库 4240    注：当前已发布到版本16</description>
    </item>
    
    <item>
      <title>Markdown语法简单教程</title>
      <link>https://blog.ionosphere.site/p/b133175a/</link>
      <pubDate>Tue, 02 Mar 2021 11:59:39 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/b133175a/</guid>
      <description>写作时所有标记用的符号都要用英文，文章标点随意
  标题 语法 #加文字
# 一级标题 ## 二级标题 ### 三级标题 . . . ###### 六级标题 效果
 标题 
一般一级标题是文章的名称，所以在博客中的标题常从二级开始
 列表 无序列表 语法 -加空格加文字
- 列表1 - 列表1.1 - 列表1.2 - 列表2 - 列表3 效果
 无序列表 
有序列表 语法 数字加.(英文句号)加空格加文字
1. 列表1 1. 列表1.1 1. 列表1.2 1. 列表2 1. 列表3 列表中数字并不需要自己一个个排序，全写1即可自动生成序号
效果
 有序列表 
 引用 语法 &amp;gt;加空格加引用内容，多行每行都加
&amp;gt; 登鹳雀楼_百度汉语 &amp;gt; 作者：王之涣 &amp;gt; 白日依山尽，黄河入海流。 &amp;gt; 欲穷千里目，更上一层楼。 效果</description>
    </item>
    
    <item>
      <title>留言</title>
      <link>https://blog.ionosphere.site/p/3c32f507/</link>
      <pubDate>Mon, 01 Mar 2021 09:38:52 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/3c32f507/</guid>
      <description>即将跳转到留言板&amp;hellip;如果未跳转请点击链接留言板
 window.location=&#39;https://support.qq.com/products/312496&#39;;   </description>
    </item>
    
    <item>
      <title>我的网抑云</title>
      <link>https://blog.ionosphere.site/p/music/</link>
      <pubDate>Thu, 25 Feb 2021 23:26:40 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/music/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>杭州市限行信息</title>
      <link>https://blog.ionosphere.site/p/7ecba2d8/</link>
      <pubDate>Thu, 25 Feb 2021 09:08:02 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/7ecba2d8/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>南阳市限行信息</title>
      <link>https://blog.ionosphere.site/p/2c7767a8/</link>
      <pubDate>Wed, 24 Feb 2021 20:07:13 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/2c7767a8/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Hugo永久链接</title>
      <link>https://blog.ionosphere.site/p/da23b91d/</link>
      <pubDate>Wed, 24 Feb 2021 00:53:53 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/da23b91d/</guid>
      <description> 使用 hugo new 新建页面时创建的页面由 archetypes/default.md决定
 永久链接的生成方案是比较简单的，直接对时间 + 文章名生成字符串做一下 md5 然后取任意 4-12 位即可。这样做的话 md5 冲撞概率极小，同时也没有那么大的运算负担。而 Hugo 在永久链接中支持下面这个参数：slug。简单来说，我们可以针对每一篇文章指定一个 slug，然后在 config.toml 中配置 permalinks 包含 slug 参数，就可以生成唯一的永久链接。我们的目的就是对每篇文章自动生成一个 slug。
修改 archetypes/default.md 添加如下一行：
---#...slug:{{substr (md5 (printf &amp;#34;%s%s&amp;#34; .Date (replace .TranslationBaseName &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title))) 4 8 }}#...--- 参考：Hugo 永久链接
 </description>
    </item>
    
    <item>
      <title>二维码挪车牌</title>
      <link>https://blog.ionosphere.site/p/1a22f05b/</link>
      <pubDate>Tue, 23 Feb 2021 12:25:05 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/1a22f05b/</guid>
      <description>实现思路  在一个在线页面内实现拨号逻辑 生成步骤1中的页面地址对应的二维码 设计步骤2中二维码的样式，打印出来  拨号界面简单实现 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;renderer&amp;#34; content=&amp;#34;webkit&amp;#34;/&amp;gt; &amp;lt;meta name=&amp;#34;force-rendering&amp;#34; content=&amp;#34;webkit&amp;#34;/&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;keywords&amp;#34; content=&amp;#34;一键拨号&amp;#34;/&amp;gt; &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;方便、简单、实用&amp;#34;/&amp;gt; &amp;lt;title&amp;gt;联系我挪车&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/css/bootstrap.min.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div style=&amp;#34;text-align: center;margin-top:50px&amp;#34;&amp;gt; &amp;lt;h1&amp;gt;临时停车😊请多关照&amp;lt;/h1&amp;gt; &amp;lt;a href=&amp;#34;tel:{{手机号码}}&amp;#34; class=&amp;#34;btn btn-success btn-lg&amp;#34; style=&amp;#34;font-size:35px;margin-top:20px;&amp;#34;&amp;gt;挪车电话&amp;lt;/a&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div style=&amp;#34;text-align: center;margin-top:50px&amp;#34;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  页面的托管是很容易解决的，Gitee、GitHub都有提供pages服务，国内推荐用gitee
 优点  可定制性高 使用方便，换号方便 价格便宜  效果展示</description>
    </item>
    
    <item>
      <title>工具集</title>
      <link>https://blog.ionosphere.site/p/9c0b7f1d/</link>
      <pubDate>Mon, 22 Feb 2021 18:09:55 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/9c0b7f1d/</guid>
      <description>MacOS 网络工具 ZeroTier One - 组网工具
shadowsocks - 梯子
Charles - 网络分析
Postman - Web Api调试工具
阅读 Kindle
calibre - 电子书工具
Knotes - Kindle笔记管理
Reeder - RSS阅读器
Maipo - 微博客户端
图片相关 Affinity Photo - 专业
Pixelmator Pro - AI加持，某些功能更便捷
Vectornator Pro - 矢量图处理
Eagle - 素材管理工具
PicGo - 图片上传工具
文档处理 draw.io - 流程图绘制
Typora - Markdown编辑
语雀 - 在线知识库
印象笔记 - 本来很好，现在广告有点恶心，特别是逢年过节，堪称丧心病狂，且不能通过开会员解决
amWiki - 一款轻量级的文库系统
博客 Hugo - 真香
Hexo - 嗯，好多人用，资源很多</description>
    </item>
    
    <item>
      <title>Windows快捷键</title>
      <link>https://blog.ionosphere.site/p/a2e6bc04/</link>
      <pubDate>Mon, 22 Feb 2021 17:17:12 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a2e6bc04/</guid>
      <description>说明 文章中的快捷键针对Windows10，其它版本Windows系统可能不生效
快捷键    键位 功能     ctrl+c 复制   ctrl+v 粘贴   ctrl+z 撤销   ctrl+a 全选   ctrl+s 保存   ctrl+x 剪切   ctrl+f 查找   ctrl+tab 切换浏览器、文件管理器等多标签软件标签页   ctrl+w 关闭浏览器、文件管理器等多标签软件的当前页面或单窗体软件   ctrl+shift+t 恢复刚关闭的浏览器页面   ctrl+t 创建一个新浏览器标签页   ctrl++ 放大（浏览器、图片浏览、桌面等处都可用）   ctrl+- 缩小（浏览器、图片浏览、桌面等处都可用）   ctrl+alt+delete 打开任务管理器界面   ctrl+p 打印当前文件       win+d 回到桌面（不论打开了多少窗体）   win+L 锁定电脑   win+e 打开文件管理器   win+m 最小化当前窗体   win+数字键 打开固定在任务栏对应顺序的应用    </description>
    </item>
    
    <item>
      <title>Gridea Gitalk 评论登录403问题</title>
      <link>https://blog.ionosphere.site/p/44c1c716/</link>
      <pubDate>Sat, 20 Feb 2021 17:59:56 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/44c1c716/</guid>
      <description>表象 成因 Gitalk默认的GitHub oauth请求反向代理CORS使用的是https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_tokenGitHub项目，该代理只是一个演示项目，由于被滥用，作者决定于2021年1月31日停止开放使用，从而导致了此问题的产生
解决  在Heroku上部署自己的cros-anywhere
   1.注册Heroku账号
  2.fork cros-anywhere项目
  3.创建Heroku应用
  4.将自己fork的项目部署创建的Heroku应用
官方文档 实际上自己通过网页端操作更方便点
  5.设置白名单防止滥用导致封号
  6.修改主题中Gitalk相关的代码 增加Gitalk反向代理配置项
  // 修改主题根目录下config.json文件，增加Gitalk反向代理自定义配置节点，用于自定义配置代理地址 { &amp;#34;customConfig&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;gitalkProxy&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;GitHub登陆&amp;#34;, &amp;#34;group&amp;#34;: &amp;#34;Gitalk&amp;#34;, //此处将地址配置成自己的代理服务器 &amp;#34;value&amp;#34;: &amp;#34;https://netnr-proxy.cloudno.de/https://github.com/login/oauth/access_token&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;input&amp;#34;, &amp;#34;note&amp;#34;: &amp;#34;GitHub验证&amp;#34; } ] } 修改Gitalk初始化代码templates/includes/gitalk.ejs
&amp;lt;script&amp;gt; window.onload = function() { var gitalk = new Gitalk({ //增加代理参数，赋值读取自定义配置  proxy: &amp;#39;&amp;lt;%= site.customConfig.gitalkProxy %&amp;gt;&amp;#39;, clientID: &amp;#39;&amp;lt;%= commentSetting.</description>
    </item>
    
    <item>
      <title>Visual Studio Code 使用问题记录</title>
      <link>https://blog.ionosphere.site/p/41e58ada/</link>
      <pubDate>Sat, 06 Feb 2021 13:19:30 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/41e58ada/</guid>
      <description>Nuget包管理加载版本时报错 解决方案：
 打开.vscode/extensions/jmrog.vscode-nuget-package-manager-1.1.6/out/src/actions/add-methods/fetchPackageVersions.js， 修改代码 ...node_fetch_1.default(`${versionsUrl}${selectedPackageName.toLowerCase()}/index.json`, utils_1.getFetchOptions(vscode.workspace.getConfiguration(&amp;#39;http&amp;#39;)))   </description>
    </item>
    
    <item>
      <title>坐标系转换</title>
      <link>https://blog.ionosphere.site/p/2a125715/</link>
      <pubDate>Fri, 05 Feb 2021 13:13:42 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/2a125715/</guid>
      <description>#!/usr/bin/python3 # -*- coding: utf-8 -*- import json import requests import math key = &amp;#39;your key here&amp;#39; # 这里填写你的百度开放平台的key x_pi = 3.14159265358979324 * 3000.0 / 180.0 pi = 3.1415926535897932384626 # π a = 6378245.0 # 长半轴 ee = 0.00669342162296594323 # 扁率 def geocode(address): &amp;#34;&amp;#34;&amp;#34; 利用百度geocoding服务解析地址获取位置坐标 :param address:需要解析的地址 :return: &amp;#34;&amp;#34;&amp;#34; geocoding = {&amp;#39;s&amp;#39;: &amp;#39;rsv3&amp;#39;, &amp;#39;key&amp;#39;: key, &amp;#39;city&amp;#39;: &amp;#39;全国&amp;#39;, &amp;#39;address&amp;#39;: address} res = requests.get( &amp;#34;http://restapi.amap.com/v3/geocode/geo&amp;#34;, params=geocoding) if res.status_code == 200: json = res.</description>
    </item>
    
    <item>
      <title>Github&#43;PicGo&#43;jsdeliver搭建图床</title>
      <link>https://blog.ionosphere.site/p/4063f65b/</link>
      <pubDate>Thu, 04 Feb 2021 17:09:16 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/4063f65b/</guid>
      <description>实现步骤  整体逻辑：使用GitHub仓库作为存储空间，利用jsdeliver做CDN，利用PicGo做图片管理工具
 1. Github设置  创建公开仓库 创建私人访问Token,并将Token记录下来   注意：Token需要有repo、delete_repo权限
 2. PicGo设置 配置如下
资源 PicGo
jsDelivr</description>
    </item>
    
    <item>
      <title>Oracle定时备份</title>
      <link>https://blog.ionosphere.site/p/22637e0b/</link>
      <pubDate>Fri, 25 Dec 2020 14:38:32 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/22637e0b/</guid>
      <description>转载自：Windows下Oracle定时备份(全量备份)
 关于Windows下oracle全量备份的文章，很多网站都有，写下本文不过是为了以后方便查找，不用再到处找。以下些许内容有所参考到其他人所写内容，这里无意冒犯，本文引用内容部分会附上参考地址，还望原作者见谅。
备份脚本 新建txt文档，把脚本复制进去后改文件格式为bat文件，双击运行即可测试该脚本是否有误。这里要说明一下，开始把脚本拿过来执行时，一直未能成功备份数据库,用bat的pause暂停调试发现了一些问题，有时不注意可能会在定义,变量如BACKUPDATE、USER等后面带了空格,这个时候问题就来了，导致参数的不正确，所以这里需注意！
@echo off echo ================================================ echo Windows环境下Oracle数据库的自动备份脚本 echo 1. 使用当前日期命名备份文件。 echo 2. 自动删除7天前的备份。 echo ================================================ echo 以“YYYYMMDD”格式取出当前时间。 set BACKUPDATE=%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2% echo 设置用户名、密码和要备份的数据库 set USER=ora_user set PASSWORD=ora_name set DATABASE=conn_db echo 创建备份目录 if not exist &amp;#34;E:\backup\data&amp;#34; mkdir E:\backup\data if not exist &amp;#34;E:\backup\log&amp;#34; mkdir E:\backup\log set DATADIR=E:\backup\data set LOGDIR=E:\backup\log exp %USER%/%PASSWORD%@%DATABASE% file=%DATADIR%\data_%BACKUPDATE%.dmp log=%LOGDIR%\log_%BACKUPDATE%.log echo 删除7天前的备份。 forfiles /p &amp;#34;%DATADIR%&amp;#34; /s /m *.* /d -7 /c &amp;#34;cmd /c del @path&amp;#34; forfiles /p &amp;#34;%LOGDIR%&amp;#34; /s /m *.</description>
    </item>
    
    <item>
      <title>文字转语音</title>
      <link>https://blog.ionosphere.site/p/0272ad7a/</link>
      <pubDate>Tue, 06 Oct 2020 13:48:54 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/0272ad7a/</guid>
      <description># 文字转语音 say -f 1.txt -o 1.aiff say 你好 -o 你好.aiff # 音频格式转换 ffmpeg -f aiff -i 你好.aiff 你好.mp3 </description>
    </item>
    
    <item>
      <title>黑神话·悟空</title>
      <link>https://blog.ionosphere.site/p/a39f146f/</link>
      <pubDate>Thu, 20 Aug 2020 11:26:07 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a39f146f/</guid>
      <description></description>
    </item>
    
    <item>
      <title>今天天气很是不错...</title>
      <link>https://blog.ionosphere.site/p/4a241902/</link>
      <pubDate>Thu, 06 Aug 2020 21:35:01 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/4a241902/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Homebrew</title>
      <link>https://blog.ionosphere.site/p/319d5434/</link>
      <pubDate>Mon, 06 Jul 2020 13:46:40 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/319d5434/</guid>
      <description> Homebrew
 查看已安装的包 查看已经安装的包
brew list 更新Homebrew 更新Homebrew(此命令会显示可以更新的包列表，已安装的包会有对号)
brew update 列出可更新的包 # 不包含含自动更新的包 brew outdated # 含自动更新的包 brew cask outdated --greedy 安装更新 brew upgrade 清理旧版本 # 查看可清理的包列表 brew cleanup -n # 清理旧版本包 brew cleanup # 清理早于3天的无用的symlink，且清理与之相关的位于/Applications和~/Applications中的无用App链接 brew cleanup --prune 3 </description>
    </item>
    
    <item>
      <title>Windows KMS激活</title>
      <link>https://blog.ionosphere.site/p/acf0469c/</link>
      <pubDate>Tue, 13 Aug 2019 13:54:20 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/acf0469c/</guid>
      <description>命令 # 查看系统激活状态 slmgr.vbs -xpr # 查看系统激活状态详细信息 slmgr.vbs -dlv # 安装产品密钥（企业版Key） slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX # 设置KMS服务器 slmgr /skms 192.168.31.57:1688 # 自动激活 slmgr /ato 密钥 W269N-WFGWX-YVC9B-4J6C9-T83GX 资源 KMS服务器</description>
    </item>
    
    <item>
      <title>拿到 [真·大师剑] 了</title>
      <link>https://blog.ionosphere.site/p/14cff628/</link>
      <pubDate>Sun, 04 Nov 2018 03:10:03 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/14cff628/</guid>
      <description></description>
    </item>
    
    <item>
      <title>一种从天而降的棒法</title>
      <link>https://blog.ionosphere.site/p/0b3c6886/</link>
      <pubDate>Sun, 16 Sep 2018 15:49:07 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/0b3c6886/</guid>
      <description></description>
    </item>
    
    <item>
      <title>目击了一条龙</title>
      <link>https://blog.ionosphere.site/p/ca48c2fa/</link>
      <pubDate>Fri, 14 Sep 2018 22:58:33 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/ca48c2fa/</guid>
      <description></description>
    </item>
    
    <item>
      <title>西山国家森林公园灵山风景区</title>
      <link>https://blog.ionosphere.site/p/343d7f9e/</link>
      <pubDate>Sat, 10 Mar 2018 21:04:54 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/343d7f9e/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
