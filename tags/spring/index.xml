<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Ionosphere</title>
    <link>https://blog.ionosphere.site/tags/spring/</link>
    <description>Recent content in Spring on Ionosphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 20 May 2021 15:16:06 +0800</lastBuildDate><atom:link href="https://blog.ionosphere.site/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>初步了解Spring</title>
      <link>https://blog.ionosphere.site/p/006e1380/</link>
      <pubDate>Thu, 20 May 2021 15:16:06 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/006e1380/</guid>
      <description>Spring是什么 Spring是一个为了解决企业级应用开发的复杂性而创建的开源框架。
Spring降低Java开发复杂性的4种关键策略
 基于POJO的轻量级和最小侵入性编程； 通过依赖注入和面向接口实现松耦合； 基于切面和惯例进行声明式编程； 通过切面和模板减少样板式代码。  基于POJO Spring代码仍旧是POJO，除了某些类会用到Spring注解，不会感觉到使用Spring的任何痕迹。
依赖注入（DI） 依赖注入可以使应用对象之间保持松散耦合。
应用切面 面向切面编程可以把遍布应用各处的功能分离出来，形成可重用组件。面向切面编程往往被定义为促使软件系统实现关注点分离的一项技术。
使用模板 通过模板封装来消除样板式代码（比如JDBC操作）。
Spring容器 在Spring中，应用对象生存于Spring容器（container）中。容器负责创建对象，装配它们，配置并管理它们的整个生命周期，从生存到死亡（new到finalize()）。容器是使用DI管理构成应用的组件，它会创建相互协作的组件之间的关联。
Spring自带了两类容器，bean工厂 和 应用上下文。bean工厂是最简单的容器，提供了基本的DI支持。应用上下文基于bean工厂构建，并提供应用框架级别的服务。bean工厂太过低级，，应用上下文要比bean工厂更受欢迎。
应用上下文 常见的应用上下文
   类型 作用     AnnotationConfigApplicationContext 从一个或多个基于Java的配置类中加载Spring应用上下文   AnnotationConfigWebApplicationContext 从一个或多个基于Java的配置类中加载Spring Web应用上下文。   ClassPathXmlApplicationContext 从类路径下的一个或多个XML配置文件中加载上下文定义，把应用上下文的定义文件作为类资源。   FileSystemXmlApplicationContext 从文件系统下的一个或多个XML配置文件中加载上下文定义。   XmlWebApplicationContext 从Web应用下的一个或多个XML配置文件中加载上下文定义。    bean的生命周期  bean的生命周期 
Spring功能概览 Spring框架通过专注于DI和AOP和消除样板代码来简化企业级Java开发，这只是Spring提供的部分功能。Spring框架是一个庞大的生态圈，它涵盖了多个不同领域，例如Web服务、REST、移动开发以及NoSQL等。
 Spring框架模块示意图</description>
    </item>
    
  </channel>
</rss>
