<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Ionosphere</title>
    <link>https://blog.ionosphere.site/tags/spring/</link>
    <description>Recent content in Spring on Ionosphere</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 06 Jul 2021 10:07:10 +0800</lastBuildDate><atom:link href="https://blog.ionosphere.site/tags/spring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>用 Spring 创建 RESTful Web Service</title>
      <link>https://blog.ionosphere.site/p/96fc722c/</link>
      <pubDate>Tue, 06 Jul 2021 10:07:10 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/96fc722c/</guid>
      <description>目标 创建一个RESTful API。
实现 在IDEA中创建Spring项目  通过srping initializr来初始化项目 依赖项要增加spring web  创建 RESTful API @RestController public class IndexController { @RequestMapping(&amp;#34;/&amp;#34;) public String index() { return &amp;#34;hello, there&amp;#34;; } }    @RestController和@Controller注解的区别： 加@Controller注解的类里的每个方法都将返回一个视图页面；加@RestController注解则数据会以json/xml的形式返回前台页面；@Controller加@ResponseBody则与@RestController效果一样。加@RestController注解则不能返回jsp、html页面。
  @RequestMapping注解，在不指定请求谓词的情况下Post和Get都支持，可以通过method指定请求方式
@RequestMapping( method = RequestMethod.GET, // .post 　path = &amp;#34;/&amp;#34; ) 还可以直接通过@GetMapping(&amp;quot;/&amp;quot;)/@PostMapping(&amp;quot;/&amp;quot;)来制定请求方式和路由
   指定服务启动端口 修改src/main/resources/application.properties文件，通过server.port=*****来指定启动端口</description>
    </item>
    
    <item>
      <title>Spring和JDBC</title>
      <link>https://blog.ionosphere.site/p/10d7a273/</link>
      <pubDate>Tue, 22 Jun 2021 16:49:05 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/10d7a273/</guid>
      <description> 如何在Spring中使用JDBC？
 配置数据源  JNDI数据源  </description>
    </item>
    
    <item>
      <title>面向切面的Spring</title>
      <link>https://blog.ionosphere.site/p/7d1371cd/</link>
      <pubDate>Tue, 08 Jun 2021 17:32:23 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/7d1371cd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>高级装配</title>
      <link>https://blog.ionosphere.site/p/de06998b/</link>
      <pubDate>Thu, 03 Jun 2021 17:13:10 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/de06998b/</guid>
      <description>Spring profile 条件化的bean声明 自动装配与歧义性 bean的作用域 Spring表达式语言   环境与profile 软件运行在不同的环境，需要装配不同的bean。比如：在开发环境、QA环境和生产环境可能会用到不同类型的数据库配置。
常规的处理手段是构建针对性的独立配置类（或者XML），在构建阶段确定要将哪一个配置编译到应用中。这种方式需要为每种环境重新构建应用，这将导致各种问题，比如从QA阶段迁移到生产环境时，重新构建可能会引入BUG。
Spring提供了不需要重新构建的解决方案。首先，在Java配置中，通过**@Profile**注解来指定某个bean属于哪一个Profile（或者在XML配置中通过&amp;lt;beans&amp;gt;元素的profile属性置顶）；然后，用spring.profiles.active和spring.profiles.default 来指定激活的profile和默认的profile（激活和默认的profile可以同时指定多个）。
 指定了profile的bean只有在对应的profile被激活时才会被创建。没有指定profie的bean始终都会被创建。
 设置active和default属性的方式
 作为DispatcherServlet的初始化参数； 作为Web应用的上下文参数； 作为JNDI条目； 作为环境变量； 作为JVM的系统属性； 在集成测试类上，使用@ActiveProfiles注解设置。  条件化的bean 有些时候，对于某些bean，我们希望只有在某些特定的情况满足之后在创建这个bean。Spring提供了**@Conditional**注解来实现根据条件动态配置bean的功能。
@Bean @Conditional(MagicExistsCondition.class) public MagicBean magicBean(){ return new MagicBean(); } package com.habuma.restfun; import org.springframework.context.annotation.Condition; import org.springframework.context.annotation.ConditionContext; import org.springframework.core.env.Environment; import org.springframework.core.type.AnnotatedTypeMetadata; public class MagicExistsCondition implements Condition { @Override public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) { Environment env = context.getEnvironment(); return env.containsProperty(&amp;#34;magic&amp;#34;); } } 当matches()方法返回true时bean才会被创建。</description>
    </item>
    
    <item>
      <title>装配Bean</title>
      <link>https://blog.ionosphere.site/p/a6324888/</link>
      <pubDate>Thu, 27 May 2021 15:15:20 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/a6324888/</guid>
      <description>创建应用对象之间协作关系的行为通常称为装配（wiring），这也是依赖注入（DI）的本质
 Spring配置方案  在XML中进显式配置 在Java中进行显式配置 隐式的bean发现机制和自动装配  选择Spring装配方案时，要根据实际情况选择自己最喜欢的方式，多种方案还可以搭配使用。要尽可能的使用自动配置机制，显式配置越少越好；当必须要使用显式配置时，优先JavaConfig；只有在想使用便利的XML命名空间而且在JavaConfig中没有同样的实现时，才使用XML。
自动化装配bean Spring从两个角度来实现自动化装配：
 组件扫描（Component scanning）：Spring会自动发现应用上下文中所创建的bean。 自动装配（autowiring）：Spring自动满足bean之间的依赖。  创建可被发现的bean 创建组件类 在类上加@Component注解，就表明这个类会作为组件类、并告知了Spring要为这个类创建bean。
package soundsystem; import org.springframework.stereotype.Component; @Component public class SgtPeppers implements CompactDisc { private String title = &amp;#34;Sgt. Pepper&amp;#39;s Lonely Hearts Club Band&amp;#34;; private String artist = &amp;#34;The Beatles&amp;#34;; public void play() { System.out.println(&amp;#34;Playing &amp;#34; + title + &amp;#34; by &amp;#34; + artist); } } 开启组件扫描 组件扫描默认不启用，需要显式配置来命令Spring扫描带有@Component注解的类、并为之创建bean。
  通过Java配置类启用组件扫描
package soundsystem; import org.</description>
    </item>
    
    <item>
      <title>初步了解Spring</title>
      <link>https://blog.ionosphere.site/p/006e1380/</link>
      <pubDate>Thu, 20 May 2021 15:16:06 +0800</pubDate>
      
      <guid>https://blog.ionosphere.site/p/006e1380/</guid>
      <description>Spring是什么 Spring是一个为了解决企业级应用开发的复杂性而创建的开源框架。
Spring降低Java开发复杂性的4种关键策略
 基于POJO的轻量级和最小侵入性编程； 通过依赖注入和面向接口实现松耦合； 基于切面和惯例进行声明式编程； 通过切面和模板减少样板式代码。  基于POJO Spring代码仍旧是POJO，除了某些类会用到Spring注解，不会感觉到使用Spring的任何痕迹。
依赖注入（DI） 依赖注入可以使应用对象之间保持松散耦合。
应用切面 面向切面编程可以把遍布应用各处的功能分离出来，形成可重用组件。面向切面编程往往被定义为促使软件系统实现关注点分离的一项技术。
使用模板 通过模板封装来消除样板式代码（比如JDBC操作）。
Spring容器 在Spring中，应用对象生存于Spring容器（container）中。容器负责创建对象，装配它们，配置并管理它们的整个生命周期，从生存到死亡（new到finalize()）。容器是使用DI管理构成应用的组件，它会创建相互协作的组件之间的关联。
Spring自带了两类容器，bean工厂 和 应用上下文。bean工厂是最简单的容器，提供了基本的DI支持。应用上下文基于bean工厂构建，并提供应用框架级别的服务。bean工厂太过低级，，应用上下文要比bean工厂更受欢迎。
应用上下文 常见的应用上下文
   类型 作用     AnnotationConfigApplicationContext 从一个或多个基于Java的配置类中加载Spring应用上下文   AnnotationConfigWebApplicationContext 从一个或多个基于Java的配置类中加载Spring Web应用上下文。   ClassPathXmlApplicationContext 从类路径下的一个或多个XML配置文件中加载上下文定义，把应用上下文的定义文件作为类资源。   FileSystemXmlApplicationContext 从文件系统下的一个或多个XML配置文件中加载上下文定义。   XmlWebApplicationContext 从Web应用下的一个或多个XML配置文件中加载上下文定义。    bean的生命周期  bean的生命周期 
Spring功能概览 Spring框架通过专注于DI和AOP和消除样板代码来简化企业级Java开发，这只是Spring提供的部分功能。Spring框架是一个庞大的生态圈，它涵盖了多个不同领域，例如Web服务、REST、移动开发以及NoSQL等。
 Spring框架模块示意图</description>
    </item>
    
  </channel>
</rss>
